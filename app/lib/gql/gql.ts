/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query ExploreContents(\n    $type: SearchType\n    $page: Int\n    $per: Int\n    $sort: SearchSorts\n    $seed: Int\n    $block_filter: BlockFilterEnum\n  ) {\n    contents: exxplore(\n      type: $type\n      page: $page\n      per: $per\n      sort_by: $sort\n      seed: $seed\n      block_filter: $block_filter\n    ) {\n      ...KonnectableCell\n      __typename\n    }\n  }\n": types.ExploreContentsDocument,
    "\n  fragment KonnectableChannelOverlay on Channel {\n    id\n    visibility\n    counts {\n      __typename\n      contents\n    }\n    __typename\n  }\n": types.KonnectableChannelOverlayFragmentDoc,
    "\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n": types.LoadingBreadcrumbChannelFragmentDoc,
    "\n  fragment KonnectableBlockOverlay on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      source {\n        url\n        __typename\n      }\n      __typename\n    }\n  }\n": types.KonnectableBlockOverlayFragmentDoc,
    "\n  query ModalFullBlock($id: ID!) {\n    block: blokk(id: $id) {\n      __typename\n      ... on Model {\n        id\n        __typename\n      }\n      ...FullBlock\n    }\n  }\n": types.ModalFullBlockDocument,
    "\n  fragment FullBlock on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      href\n      __typename\n    }\n    ...FullBlockContentPane\n    ...FullBlockMetadataPane\n  }\n": types.FullBlockFragmentDoc,
    "\n  fragment FullBlockContentPane on Konnectable {\n    ...FullBlockImage\n    ...FullBlockText\n    ...FullBlockLink\n    ...FullBlockAttachment\n    ...FullBlockEmbed\n    __typename\n  }\n": types.FullBlockContentPaneFragmentDoc,
    "\n  fragment FullBlockImage on Image {\n    id\n    title\n    thumb_url: image_url(size: THUMB)\n    image_url(size: LARGE)\n    src_1x: resized_image_url(\n      width: 315\n      height: 315\n      quality: 85\n      fallback_format: PNG\n    )\n    original_image_url: image_url(size: ORIGINAL)\n    alt_text\n    __typename\n  }\n": types.FullBlockImageFragmentDoc,
    "\n  fragment FullBlockLink on Link {\n    id\n    title\n    source_url\n    image_url(size: ORIGINAL)\n    image_updated_at(format: \"%m/%d/%y\")\n    image_updated_at_unix_time: image_updated_at(format: \"%s\")\n    content(format: HTML)\n    source {\n      title\n      url\n      provider_name\n      provider_url\n      __typename\n    }\n    __typename\n  }\n": types.FullBlockLinkFragmentDoc,
    "\n  fragment FullBlockAttachment on Attachment {\n    id\n    title\n    file_extension\n    file_url\n    file_size\n    file_content_type\n    image_url(size: DISPLAY)\n    image_updated_at(format: \"%m/%d/%y\")\n    image_updated_at_unix_time: image_updated_at(format: \"%s\")\n    __typename\n  }\n": types.FullBlockAttachmentFragmentDoc,
    "\n  fragment FullBlockText on Text {\n    __typename\n    id\n    html_content: content(format: HTML)\n    raw: content(format: MARKDOWN)\n    can {\n      manage\n      __typename\n    }\n  }\n": types.FullBlockTextFragmentDoc,
    "\n  fragment FullBlockEmbed on Embed {\n    id\n    title\n    embed_html\n    embed_width\n    embed_height\n    __typename\n  }\n": types.FullBlockEmbedFragmentDoc,
    "\n  fragment FullBlockActions on Konnectable {\n    __typename\n    ... on Image {\n      find_original_url\n      downloadable_image: resized_image_url(downloadable: true)\n      __typename\n    }\n    ... on Text {\n      find_original_url\n      __typename\n    }\n    ... on ConnectableInterface {\n      source {\n        title\n        url\n        __typename\n      }\n      __typename\n    }\n    ... on Block {\n      can {\n        mute\n        potentially_edit_thumbnail\n        edit_thumbnail\n        __typename\n      }\n      __typename\n    }\n    ...FullBlockShare\n  }\n": types.FullBlockActionsFragmentDoc,
    "\n  fragment ManageBlock on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      editable_title: title\n      editable_description: description(format: MARKDOWN)\n      __typename\n    }\n    ... on Text {\n      editable_content: content(format: MARKDOWN)\n      __typename\n    }\n    ... on Image {\n      editable_alt_text: alt_text\n      __typename\n    }\n  }\n": types.ManageBlockFragmentDoc,
    "\n  fragment FullBlockMetadataPane on Konnectable {\n    ... on Model {\n      created_at_unix_time: created_at(format: \"%s\")\n      created_at_timestamp: created_at\n      created_at(relative: true)\n      updated_at(relative: true)\n      updated_at_timestamp: updated_at\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      description(format: HTML)\n      user {\n        __typename\n        id\n        name\n        href\n      }\n      source {\n        title\n        url\n        __typename\n      }\n      __typename\n    }\n    ... on Block {\n      can {\n        manage\n        comment\n        __typename\n      }\n      __typename\n    }\n    ...FullBlockActions\n    ...ManageBlock\n    __typename\n  }\n": types.FullBlockMetadataPaneFragmentDoc,
    "\n  fragment ChannelMetadata on Channel {\n    ...ChannelBreadcrumb\n    ...ChannelMetadataActions\n    ...ChannelMetadataInfo\n    ...CollaboratorsList\n    ...ChannelMetadataConnections\n    ...ChannelShareButton\n    slug\n    __typename\n  }\n": types.ChannelMetadataFragmentDoc,
    "\n  fragment ChannelBreadcrumb on Channel {\n    __typename\n    id\n    title\n    truncatedTitle: title(truncate: 35)\n    href\n    visibility\n    owner {\n      __typename\n      ... on User {\n        id\n        name\n        href\n        ...LoadingBreadcrumbUser\n        __typename\n      }\n      ... on Group {\n        id\n        name\n        href\n        ...LoadingBreadcrumbGroup\n        __typename\n      }\n    }\n    counts {\n      collaborators\n      __typename\n    }\n    ...LoadingBreadcrumbChannel\n  }\n": types.ChannelBreadcrumbFragmentDoc,
    "\n  fragment ChannelMetadataActions on Channel {\n    __typename\n    id\n    can {\n      follow\n      update\n      destroy\n      mute\n      __typename\n    }\n    ...MuteChannelButton\n  }\n": types.ChannelMetadataActionsFragmentDoc,
    "\n  fragment ChannelMetadataInfo on Channel {\n    __typename\n    id\n    href\n    visibility\n    info: description(format: HTML)\n    counts {\n      followers\n      __typename\n    }\n    can {\n      share\n      __typename\n    }\n    user {\n      __typename\n      id\n      href\n      name\n    }\n  }\n": types.ChannelMetadataInfoFragmentDoc,
    "\n  fragment ChannelMetadataConnections on Channel {\n    __typename\n    id\n    can {\n      connect\n      __typename\n    }\n    connected_to_channels {\n      __typename\n      id\n      label: title\n      href\n      ...LoadingBreadcrumbChannel\n    }\n  }\n": types.ChannelMetadataConnectionsFragmentDoc,
    "\n  fragment ChannelContentsFilter on Channel {\n    __typename\n    id\n    title\n    counts {\n      contents\n      blocks\n      channels\n      __typename\n    }\n  }\n": types.ChannelContentsFilterFragmentDoc,
    "\n  fragment ChannelEmptyMessage on Channel {\n    __typename\n    id\n    counts {\n      contents\n      __typename\n    }\n    can {\n      add_to\n      add_to_as_premium\n      __typename\n    }\n    owner {\n      __typename\n      ... on User {\n        id\n        name\n        href\n        __typename\n      }\n      ... on Group {\n        id\n        name\n        href\n        __typename\n      }\n    }\n  }\n": types.ChannelEmptyMessageFragmentDoc,
    "\n  fragment CollaboratorsList on Channel {\n    __typename\n    id\n    can {\n      manage_collaborators\n      __typename\n    }\n    collaborators: members {\n      ...CollaboratorLink\n      __typename\n    }\n  }\n": types.CollaboratorsListFragmentDoc,
    "\n  fragment CollaboratorLink on Member {\n    __typename\n    ... on User {\n      id\n      name\n      href\n      __typename\n    }\n    ... on Group {\n      id\n      name\n      href\n      description(format: MARKDOWN)\n      user {\n        id\n        name\n        href\n        __typename\n      }\n      users {\n        id\n        name\n        href\n        __typename\n      }\n      can {\n        manage\n        manage_users\n        __typename\n      }\n      visibility\n      __typename\n    }\n    ...LoadingBreadcrumbGroup\n    ...LoadingBreadcrumbUser\n  }\n": types.CollaboratorLinkFragmentDoc,
    "\n  fragment MuteChannelButton on Channel {\n    __typename\n    id\n    is_muted\n  }\n": types.MuteChannelButtonFragmentDoc,
    "\n  fragment ChannelShareButton on Channel {\n    __typename\n    id\n    visibility\n    share {\n      url\n      twitter_url\n      facebook_url\n      __typename\n    }\n  }\n": types.ChannelShareButtonFragmentDoc,
    "\n  fragment ChannelPageMetaTags on Channel {\n    __typename\n    id\n    meta_title: title\n    meta_description: description(format: MARKDOWN)\n    canonical: href(absolute: true)\n    is_nsfw\n    image_url(size: DISPLAY)\n    visibility\n    owner {\n      ... on User {\n        is_indexable\n        __typename\n      }\n      __typename\n    }\n  }\n": types.ChannelPageMetaTagsFragmentDoc,
    "\n  query ChannelPage($id: ID!) {\n    channel(id: $id) {\n      ...ChannelMetadata\n      ...ChannelPageMetaTags\n      ...ChannelEmptyMessage\n      ...ChannelContentsFilter\n      __typename\n    }\n  }\n\n  fragment LoadingBreadcrumbUser on User {\n    __typename\n    id\n    label: name\n  }\n\n  fragment LoadingBreadcrumbGroup on Group {\n    __typename\n    id\n    label: name\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n\n  fragment ChannelContentsFilter on Channel {\n    __typename\n    id\n    title\n    counts {\n      contents\n      blocks\n      channels\n      __typename\n    }\n  }\n": types.ChannelPageDocument,
    "\n  query ChannelBlokksPaginated($id: ID!, $page: Int!, $per: Int!) {\n    channel(id: $id) {\n      __typename\n      id\n      title\n\n      blokks(page: $page, per: $per, sort_by: POSITION, direction: DESC) {\n        __typename\n        ...ChannelContentsConnectable\n      }\n      counts {\n        contents\n        blocks\n        channels\n        __typename\n      }\n    }\n  }\n\n  fragment ChannelContentsConnectable on Konnectable {\n    ...KonnectableCell\n    __typename\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n": types.ChannelBlokksPaginatedDocument,
    "\n  fragment FullBlockConnections on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on Block {\n      counts {\n        public_channels\n        current_user_channels: channels_by_current_user\n        private_channels: private_accessible_channels\n        __typename\n      }\n      __typename\n    }\n    ... on ConnectableInterface {\n      current_user_channels: connections(filter: OWN) {\n        __typename\n        id\n        created_at(format: \"%B %Y\")\n        channel {\n          ...CompactChannel\n          __typename\n        }\n      }\n      public_channels: connections(\n        page: $page\n        per: $per\n        direction: DESC\n        filter: EXCLUDE_OWN\n      ) {\n        __typename\n        id\n        created_at(format: \"%B %Y\")\n        channel {\n          ...CompactChannel\n          __typename\n        }\n      }\n      source {\n        url\n        __typename\n      }\n      ...FullBlockChannelsAlsoIn\n      __typename\n    }\n  }\n": types.FullBlockConnectionsFragmentDoc,
    "\n  query FullBlockConnectionsQuery($id: ID!, $page: Int, $per: Int) {\n    block: blokk(id: $id) {\n      ...FullBlockConnections\n      __typename\n    }\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n\n  fragment FullBlockChannelsAlsoIn on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on Block {\n      counts {\n        channels_with_same_source\n        __typename\n      }\n      channels_with_same_source(per: 5) {\n        ...CompactChannel\n        __typename\n      }\n      __typename\n    }\n  }\n": types.FullBlockConnectionsQueryDocument,
    "\n  fragment FullBlockShare on Konnectable {\n    ... on ConnectableInterface {\n      shareable_href: href\n      shareable_title: title(truncate: 40)\n      __typename\n    }\n    __typename\n  }\n": types.FullBlockShareFragmentDoc,
    "\n  query FullBlockFold($id: ID!) {\n    block: blokk(id: $id) {\n      ... on Block {\n        counts {\n          __typename\n          public_channels\n          private_channels: private_accessible_channels\n          comments\n        }\n        can {\n          manage\n          comment\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n": types.FullBlockFoldDocument,
    "\n  fragment KonnectableImage on Image {\n    id\n    title\n    href\n    alt_text\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(\n      width: 315\n      height: 315\n      quality: 85\n      fallback_format: PNG\n    )\n    src_2x: resized_image_url(width: 630, height: 630, fallback_format: PNG)\n    src_3x: resized_image_url(width: 500, height: 500, fallback_format: PNG)\n    original_dimensions {\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n": types.KonnectableImageFragmentDoc,
    "\n  fragment KonnectableChannel on Channel {\n    id\n    truncatedTitle: title(truncate: 80)\n    visibility\n    updated_at(relative: true)\n    counts {\n      __typename\n      contents\n    }\n    owner {\n      __typename\n      ... on Group {\n        id\n        name\n        visibility\n        __typename\n      }\n      ... on User {\n        id\n        name\n        __typename\n      }\n    }\n    ...KonnectableChannelOverlay\n    ...LoadingBreadcrumbChannel\n    __typename\n  }\n": types.KonnectableChannelFragmentDoc,
    "\n  fragment KonnectableAttachment on Attachment {\n    id\n    title\n    href\n    file_extension\n    image_url(size: DISPLAY)\n    __typename\n  }\n": types.KonnectableAttachmentFragmentDoc,
    "\n  fragment KonnectableEmbed on Embed {\n    id\n    title\n    href\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(width: 315, height: 315, quality: 85)\n    src_2x: resized_image_url(width: 630, height: 630)\n    src_3x: resized_image_url(width: 945, height: 945)\n    __typename\n  }\n": types.KonnectableEmbedFragmentDoc,
    "\n  fragment KonnectableText on Text {\n    id\n    title\n    href\n    html: content(format: HTML)\n    raw: content(format: MARKDOWN)\n    __typename\n  }\n": types.KonnectableTextFragmentDoc,
    "\n  fragment KonnectableLink on Link {\n    href\n    title\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(\n      width: 415\n      height: 415\n      quality: 90\n      fallback_format: PNG\n    )\n    src_2x: resized_image_url(width: 630, height: 630, fallback_format: PNG)\n    src_3x: resized_image_url(width: 945, height: 945, fallback_format: PNG)\n    external_url: source_url\n    content(format: HTML)\n    __typename\n  }\n": types.KonnectableLinkFragmentDoc,
    "\n  fragment KonnectableCell on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      href\n      __typename\n    }\n    ... on Block {\n      count: counts {\n        comments\n        __typename\n      }\n      __typename\n    }\n    ...KonnectableDisplay\n    ...KonnectableMetadata\n    ...KonnectableBlockOverlay\n    ...LoadingBreadcrumbChannel\n  }\n": types.KonnectableCellFragmentDoc,
    "\n  fragment KonnectableDisplay on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ...KonnectableChannel\n    ...KonnectableText\n    ...KonnectableImage\n    ...KonnectableLink\n    ...KonnectableEmbed\n    ...KonnectableAttachment\n    ...KonnectableMetadata\n  }\n": types.KonnectableDisplayFragmentDoc,
    "\n  fragment KonnectableMetadata on Konnectable {\n    ... on Model {\n      updated_at(relative: true)\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      user {\n        id\n        name\n        __typename\n      }\n      connection {\n        created_at(relative: true)\n        user {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      ... on Attachment {\n        file_extension\n        __typename\n      }\n\n      ... on Link {\n        source_url\n\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n": types.KonnectableMetadataFragmentDoc,
    "\n  fragment CompactChannel on Channel {\n    __typename\n    id\n    href\n    visibility\n    title\n    owner {\n      ... on Group {\n        __typename\n        id\n        name\n        visibility\n      }\n      ... on User {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n    counts {\n      contents\n      __typename\n    }\n    ...LoadingBreadcrumbChannel\n  }\n": types.CompactChannelFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ExploreContents(\n    $type: SearchType\n    $page: Int\n    $per: Int\n    $sort: SearchSorts\n    $seed: Int\n    $block_filter: BlockFilterEnum\n  ) {\n    contents: exxplore(\n      type: $type\n      page: $page\n      per: $per\n      sort_by: $sort\n      seed: $seed\n      block_filter: $block_filter\n    ) {\n      ...KonnectableCell\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query ExploreContents(\n    $type: SearchType\n    $page: Int\n    $per: Int\n    $sort: SearchSorts\n    $seed: Int\n    $block_filter: BlockFilterEnum\n  ) {\n    contents: exxplore(\n      type: $type\n      page: $page\n      per: $per\n      sort_by: $sort\n      seed: $seed\n      block_filter: $block_filter\n    ) {\n      ...KonnectableCell\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableChannelOverlay on Channel {\n    id\n    visibility\n    counts {\n      __typename\n      contents\n    }\n    __typename\n  }\n"): (typeof documents)["\n  fragment KonnectableChannelOverlay on Channel {\n    id\n    visibility\n    counts {\n      __typename\n      contents\n    }\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableBlockOverlay on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      source {\n        url\n        __typename\n      }\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment KonnectableBlockOverlay on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      source {\n        url\n        __typename\n      }\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ModalFullBlock($id: ID!) {\n    block: blokk(id: $id) {\n      __typename\n      ... on Model {\n        id\n        __typename\n      }\n      ...FullBlock\n    }\n  }\n"): (typeof documents)["\n  query ModalFullBlock($id: ID!) {\n    block: blokk(id: $id) {\n      __typename\n      ... on Model {\n        id\n        __typename\n      }\n      ...FullBlock\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlock on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      href\n      __typename\n    }\n    ...FullBlockContentPane\n    ...FullBlockMetadataPane\n  }\n"): (typeof documents)["\n  fragment FullBlock on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      href\n      __typename\n    }\n    ...FullBlockContentPane\n    ...FullBlockMetadataPane\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockContentPane on Konnectable {\n    ...FullBlockImage\n    ...FullBlockText\n    ...FullBlockLink\n    ...FullBlockAttachment\n    ...FullBlockEmbed\n    __typename\n  }\n"): (typeof documents)["\n  fragment FullBlockContentPane on Konnectable {\n    ...FullBlockImage\n    ...FullBlockText\n    ...FullBlockLink\n    ...FullBlockAttachment\n    ...FullBlockEmbed\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockImage on Image {\n    id\n    title\n    thumb_url: image_url(size: THUMB)\n    image_url(size: LARGE)\n    src_1x: resized_image_url(\n      width: 315\n      height: 315\n      quality: 85\n      fallback_format: PNG\n    )\n    original_image_url: image_url(size: ORIGINAL)\n    alt_text\n    __typename\n  }\n"): (typeof documents)["\n  fragment FullBlockImage on Image {\n    id\n    title\n    thumb_url: image_url(size: THUMB)\n    image_url(size: LARGE)\n    src_1x: resized_image_url(\n      width: 315\n      height: 315\n      quality: 85\n      fallback_format: PNG\n    )\n    original_image_url: image_url(size: ORIGINAL)\n    alt_text\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockLink on Link {\n    id\n    title\n    source_url\n    image_url(size: ORIGINAL)\n    image_updated_at(format: \"%m/%d/%y\")\n    image_updated_at_unix_time: image_updated_at(format: \"%s\")\n    content(format: HTML)\n    source {\n      title\n      url\n      provider_name\n      provider_url\n      __typename\n    }\n    __typename\n  }\n"): (typeof documents)["\n  fragment FullBlockLink on Link {\n    id\n    title\n    source_url\n    image_url(size: ORIGINAL)\n    image_updated_at(format: \"%m/%d/%y\")\n    image_updated_at_unix_time: image_updated_at(format: \"%s\")\n    content(format: HTML)\n    source {\n      title\n      url\n      provider_name\n      provider_url\n      __typename\n    }\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockAttachment on Attachment {\n    id\n    title\n    file_extension\n    file_url\n    file_size\n    file_content_type\n    image_url(size: DISPLAY)\n    image_updated_at(format: \"%m/%d/%y\")\n    image_updated_at_unix_time: image_updated_at(format: \"%s\")\n    __typename\n  }\n"): (typeof documents)["\n  fragment FullBlockAttachment on Attachment {\n    id\n    title\n    file_extension\n    file_url\n    file_size\n    file_content_type\n    image_url(size: DISPLAY)\n    image_updated_at(format: \"%m/%d/%y\")\n    image_updated_at_unix_time: image_updated_at(format: \"%s\")\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockText on Text {\n    __typename\n    id\n    html_content: content(format: HTML)\n    raw: content(format: MARKDOWN)\n    can {\n      manage\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment FullBlockText on Text {\n    __typename\n    id\n    html_content: content(format: HTML)\n    raw: content(format: MARKDOWN)\n    can {\n      manage\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockEmbed on Embed {\n    id\n    title\n    embed_html\n    embed_width\n    embed_height\n    __typename\n  }\n"): (typeof documents)["\n  fragment FullBlockEmbed on Embed {\n    id\n    title\n    embed_html\n    embed_width\n    embed_height\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockActions on Konnectable {\n    __typename\n    ... on Image {\n      find_original_url\n      downloadable_image: resized_image_url(downloadable: true)\n      __typename\n    }\n    ... on Text {\n      find_original_url\n      __typename\n    }\n    ... on ConnectableInterface {\n      source {\n        title\n        url\n        __typename\n      }\n      __typename\n    }\n    ... on Block {\n      can {\n        mute\n        potentially_edit_thumbnail\n        edit_thumbnail\n        __typename\n      }\n      __typename\n    }\n    ...FullBlockShare\n  }\n"): (typeof documents)["\n  fragment FullBlockActions on Konnectable {\n    __typename\n    ... on Image {\n      find_original_url\n      downloadable_image: resized_image_url(downloadable: true)\n      __typename\n    }\n    ... on Text {\n      find_original_url\n      __typename\n    }\n    ... on ConnectableInterface {\n      source {\n        title\n        url\n        __typename\n      }\n      __typename\n    }\n    ... on Block {\n      can {\n        mute\n        potentially_edit_thumbnail\n        edit_thumbnail\n        __typename\n      }\n      __typename\n    }\n    ...FullBlockShare\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ManageBlock on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      editable_title: title\n      editable_description: description(format: MARKDOWN)\n      __typename\n    }\n    ... on Text {\n      editable_content: content(format: MARKDOWN)\n      __typename\n    }\n    ... on Image {\n      editable_alt_text: alt_text\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment ManageBlock on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      editable_title: title\n      editable_description: description(format: MARKDOWN)\n      __typename\n    }\n    ... on Text {\n      editable_content: content(format: MARKDOWN)\n      __typename\n    }\n    ... on Image {\n      editable_alt_text: alt_text\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockMetadataPane on Konnectable {\n    ... on Model {\n      created_at_unix_time: created_at(format: \"%s\")\n      created_at_timestamp: created_at\n      created_at(relative: true)\n      updated_at(relative: true)\n      updated_at_timestamp: updated_at\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      description(format: HTML)\n      user {\n        __typename\n        id\n        name\n        href\n      }\n      source {\n        title\n        url\n        __typename\n      }\n      __typename\n    }\n    ... on Block {\n      can {\n        manage\n        comment\n        __typename\n      }\n      __typename\n    }\n    ...FullBlockActions\n    ...ManageBlock\n    __typename\n  }\n"): (typeof documents)["\n  fragment FullBlockMetadataPane on Konnectable {\n    ... on Model {\n      created_at_unix_time: created_at(format: \"%s\")\n      created_at_timestamp: created_at\n      created_at(relative: true)\n      updated_at(relative: true)\n      updated_at_timestamp: updated_at\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      description(format: HTML)\n      user {\n        __typename\n        id\n        name\n        href\n      }\n      source {\n        title\n        url\n        __typename\n      }\n      __typename\n    }\n    ... on Block {\n      can {\n        manage\n        comment\n        __typename\n      }\n      __typename\n    }\n    ...FullBlockActions\n    ...ManageBlock\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelMetadata on Channel {\n    ...ChannelBreadcrumb\n    ...ChannelMetadataActions\n    ...ChannelMetadataInfo\n    ...CollaboratorsList\n    ...ChannelMetadataConnections\n    ...ChannelShareButton\n    slug\n    __typename\n  }\n"): (typeof documents)["\n  fragment ChannelMetadata on Channel {\n    ...ChannelBreadcrumb\n    ...ChannelMetadataActions\n    ...ChannelMetadataInfo\n    ...CollaboratorsList\n    ...ChannelMetadataConnections\n    ...ChannelShareButton\n    slug\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelBreadcrumb on Channel {\n    __typename\n    id\n    title\n    truncatedTitle: title(truncate: 35)\n    href\n    visibility\n    owner {\n      __typename\n      ... on User {\n        id\n        name\n        href\n        ...LoadingBreadcrumbUser\n        __typename\n      }\n      ... on Group {\n        id\n        name\n        href\n        ...LoadingBreadcrumbGroup\n        __typename\n      }\n    }\n    counts {\n      collaborators\n      __typename\n    }\n    ...LoadingBreadcrumbChannel\n  }\n"): (typeof documents)["\n  fragment ChannelBreadcrumb on Channel {\n    __typename\n    id\n    title\n    truncatedTitle: title(truncate: 35)\n    href\n    visibility\n    owner {\n      __typename\n      ... on User {\n        id\n        name\n        href\n        ...LoadingBreadcrumbUser\n        __typename\n      }\n      ... on Group {\n        id\n        name\n        href\n        ...LoadingBreadcrumbGroup\n        __typename\n      }\n    }\n    counts {\n      collaborators\n      __typename\n    }\n    ...LoadingBreadcrumbChannel\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelMetadataActions on Channel {\n    __typename\n    id\n    can {\n      follow\n      update\n      destroy\n      mute\n      __typename\n    }\n    ...MuteChannelButton\n  }\n"): (typeof documents)["\n  fragment ChannelMetadataActions on Channel {\n    __typename\n    id\n    can {\n      follow\n      update\n      destroy\n      mute\n      __typename\n    }\n    ...MuteChannelButton\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelMetadataInfo on Channel {\n    __typename\n    id\n    href\n    visibility\n    info: description(format: HTML)\n    counts {\n      followers\n      __typename\n    }\n    can {\n      share\n      __typename\n    }\n    user {\n      __typename\n      id\n      href\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelMetadataInfo on Channel {\n    __typename\n    id\n    href\n    visibility\n    info: description(format: HTML)\n    counts {\n      followers\n      __typename\n    }\n    can {\n      share\n      __typename\n    }\n    user {\n      __typename\n      id\n      href\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelMetadataConnections on Channel {\n    __typename\n    id\n    can {\n      connect\n      __typename\n    }\n    connected_to_channels {\n      __typename\n      id\n      label: title\n      href\n      ...LoadingBreadcrumbChannel\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelMetadataConnections on Channel {\n    __typename\n    id\n    can {\n      connect\n      __typename\n    }\n    connected_to_channels {\n      __typename\n      id\n      label: title\n      href\n      ...LoadingBreadcrumbChannel\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelContentsFilter on Channel {\n    __typename\n    id\n    title\n    counts {\n      contents\n      blocks\n      channels\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelContentsFilter on Channel {\n    __typename\n    id\n    title\n    counts {\n      contents\n      blocks\n      channels\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelEmptyMessage on Channel {\n    __typename\n    id\n    counts {\n      contents\n      __typename\n    }\n    can {\n      add_to\n      add_to_as_premium\n      __typename\n    }\n    owner {\n      __typename\n      ... on User {\n        id\n        name\n        href\n        __typename\n      }\n      ... on Group {\n        id\n        name\n        href\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelEmptyMessage on Channel {\n    __typename\n    id\n    counts {\n      contents\n      __typename\n    }\n    can {\n      add_to\n      add_to_as_premium\n      __typename\n    }\n    owner {\n      __typename\n      ... on User {\n        id\n        name\n        href\n        __typename\n      }\n      ... on Group {\n        id\n        name\n        href\n        __typename\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CollaboratorsList on Channel {\n    __typename\n    id\n    can {\n      manage_collaborators\n      __typename\n    }\n    collaborators: members {\n      ...CollaboratorLink\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment CollaboratorsList on Channel {\n    __typename\n    id\n    can {\n      manage_collaborators\n      __typename\n    }\n    collaborators: members {\n      ...CollaboratorLink\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CollaboratorLink on Member {\n    __typename\n    ... on User {\n      id\n      name\n      href\n      __typename\n    }\n    ... on Group {\n      id\n      name\n      href\n      description(format: MARKDOWN)\n      user {\n        id\n        name\n        href\n        __typename\n      }\n      users {\n        id\n        name\n        href\n        __typename\n      }\n      can {\n        manage\n        manage_users\n        __typename\n      }\n      visibility\n      __typename\n    }\n    ...LoadingBreadcrumbGroup\n    ...LoadingBreadcrumbUser\n  }\n"): (typeof documents)["\n  fragment CollaboratorLink on Member {\n    __typename\n    ... on User {\n      id\n      name\n      href\n      __typename\n    }\n    ... on Group {\n      id\n      name\n      href\n      description(format: MARKDOWN)\n      user {\n        id\n        name\n        href\n        __typename\n      }\n      users {\n        id\n        name\n        href\n        __typename\n      }\n      can {\n        manage\n        manage_users\n        __typename\n      }\n      visibility\n      __typename\n    }\n    ...LoadingBreadcrumbGroup\n    ...LoadingBreadcrumbUser\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MuteChannelButton on Channel {\n    __typename\n    id\n    is_muted\n  }\n"): (typeof documents)["\n  fragment MuteChannelButton on Channel {\n    __typename\n    id\n    is_muted\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelShareButton on Channel {\n    __typename\n    id\n    visibility\n    share {\n      url\n      twitter_url\n      facebook_url\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelShareButton on Channel {\n    __typename\n    id\n    visibility\n    share {\n      url\n      twitter_url\n      facebook_url\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChannelPageMetaTags on Channel {\n    __typename\n    id\n    meta_title: title\n    meta_description: description(format: MARKDOWN)\n    canonical: href(absolute: true)\n    is_nsfw\n    image_url(size: DISPLAY)\n    visibility\n    owner {\n      ... on User {\n        is_indexable\n        __typename\n      }\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelPageMetaTags on Channel {\n    __typename\n    id\n    meta_title: title\n    meta_description: description(format: MARKDOWN)\n    canonical: href(absolute: true)\n    is_nsfw\n    image_url(size: DISPLAY)\n    visibility\n    owner {\n      ... on User {\n        is_indexable\n        __typename\n      }\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChannelPage($id: ID!) {\n    channel(id: $id) {\n      ...ChannelMetadata\n      ...ChannelPageMetaTags\n      ...ChannelEmptyMessage\n      ...ChannelContentsFilter\n      __typename\n    }\n  }\n\n  fragment LoadingBreadcrumbUser on User {\n    __typename\n    id\n    label: name\n  }\n\n  fragment LoadingBreadcrumbGroup on Group {\n    __typename\n    id\n    label: name\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n\n  fragment ChannelContentsFilter on Channel {\n    __typename\n    id\n    title\n    counts {\n      contents\n      blocks\n      channels\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query ChannelPage($id: ID!) {\n    channel(id: $id) {\n      ...ChannelMetadata\n      ...ChannelPageMetaTags\n      ...ChannelEmptyMessage\n      ...ChannelContentsFilter\n      __typename\n    }\n  }\n\n  fragment LoadingBreadcrumbUser on User {\n    __typename\n    id\n    label: name\n  }\n\n  fragment LoadingBreadcrumbGroup on Group {\n    __typename\n    id\n    label: name\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n\n  fragment ChannelContentsFilter on Channel {\n    __typename\n    id\n    title\n    counts {\n      contents\n      blocks\n      channels\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChannelBlokksPaginated($id: ID!, $page: Int!, $per: Int!) {\n    channel(id: $id) {\n      __typename\n      id\n      title\n\n      blokks(page: $page, per: $per, sort_by: POSITION, direction: DESC) {\n        __typename\n        ...ChannelContentsConnectable\n      }\n      counts {\n        contents\n        blocks\n        channels\n        __typename\n      }\n    }\n  }\n\n  fragment ChannelContentsConnectable on Konnectable {\n    ...KonnectableCell\n    __typename\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query ChannelBlokksPaginated($id: ID!, $page: Int!, $per: Int!) {\n    channel(id: $id) {\n      __typename\n      id\n      title\n\n      blokks(page: $page, per: $per, sort_by: POSITION, direction: DESC) {\n        __typename\n        ...ChannelContentsConnectable\n      }\n      counts {\n        contents\n        blocks\n        channels\n        __typename\n      }\n    }\n  }\n\n  fragment ChannelContentsConnectable on Konnectable {\n    ...KonnectableCell\n    __typename\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockConnections on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on Block {\n      counts {\n        public_channels\n        current_user_channels: channels_by_current_user\n        private_channels: private_accessible_channels\n        __typename\n      }\n      __typename\n    }\n    ... on ConnectableInterface {\n      current_user_channels: connections(filter: OWN) {\n        __typename\n        id\n        created_at(format: \"%B %Y\")\n        channel {\n          ...CompactChannel\n          __typename\n        }\n      }\n      public_channels: connections(\n        page: $page\n        per: $per\n        direction: DESC\n        filter: EXCLUDE_OWN\n      ) {\n        __typename\n        id\n        created_at(format: \"%B %Y\")\n        channel {\n          ...CompactChannel\n          __typename\n        }\n      }\n      source {\n        url\n        __typename\n      }\n      ...FullBlockChannelsAlsoIn\n      __typename\n    }\n  }\n"): (typeof documents)["\n  fragment FullBlockConnections on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on Block {\n      counts {\n        public_channels\n        current_user_channels: channels_by_current_user\n        private_channels: private_accessible_channels\n        __typename\n      }\n      __typename\n    }\n    ... on ConnectableInterface {\n      current_user_channels: connections(filter: OWN) {\n        __typename\n        id\n        created_at(format: \"%B %Y\")\n        channel {\n          ...CompactChannel\n          __typename\n        }\n      }\n      public_channels: connections(\n        page: $page\n        per: $per\n        direction: DESC\n        filter: EXCLUDE_OWN\n      ) {\n        __typename\n        id\n        created_at(format: \"%B %Y\")\n        channel {\n          ...CompactChannel\n          __typename\n        }\n      }\n      source {\n        url\n        __typename\n      }\n      ...FullBlockChannelsAlsoIn\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FullBlockConnectionsQuery($id: ID!, $page: Int, $per: Int) {\n    block: blokk(id: $id) {\n      ...FullBlockConnections\n      __typename\n    }\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n\n  fragment FullBlockChannelsAlsoIn on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on Block {\n      counts {\n        channels_with_same_source\n        __typename\n      }\n      channels_with_same_source(per: 5) {\n        ...CompactChannel\n        __typename\n      }\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query FullBlockConnectionsQuery($id: ID!, $page: Int, $per: Int) {\n    block: blokk(id: $id) {\n      ...FullBlockConnections\n      __typename\n    }\n  }\n\n  fragment LoadingBreadcrumbChannel on Channel {\n    __typename\n    id\n    label: title\n    owner {\n      ... on User {\n        __typename\n        id\n        name\n      }\n      ... on Group {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n  }\n\n  fragment FullBlockChannelsAlsoIn on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on Block {\n      counts {\n        channels_with_same_source\n        __typename\n      }\n      channels_with_same_source(per: 5) {\n        ...CompactChannel\n        __typename\n      }\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FullBlockShare on Konnectable {\n    ... on ConnectableInterface {\n      shareable_href: href\n      shareable_title: title(truncate: 40)\n      __typename\n    }\n    __typename\n  }\n"): (typeof documents)["\n  fragment FullBlockShare on Konnectable {\n    ... on ConnectableInterface {\n      shareable_href: href\n      shareable_title: title(truncate: 40)\n      __typename\n    }\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FullBlockFold($id: ID!) {\n    block: blokk(id: $id) {\n      ... on Block {\n        counts {\n          __typename\n          public_channels\n          private_channels: private_accessible_channels\n          comments\n        }\n        can {\n          manage\n          comment\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  query FullBlockFold($id: ID!) {\n    block: blokk(id: $id) {\n      ... on Block {\n        counts {\n          __typename\n          public_channels\n          private_channels: private_accessible_channels\n          comments\n        }\n        can {\n          manage\n          comment\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableImage on Image {\n    id\n    title\n    href\n    alt_text\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(\n      width: 315\n      height: 315\n      quality: 85\n      fallback_format: PNG\n    )\n    src_2x: resized_image_url(width: 630, height: 630, fallback_format: PNG)\n    src_3x: resized_image_url(width: 500, height: 500, fallback_format: PNG)\n    original_dimensions {\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n"): (typeof documents)["\n  fragment KonnectableImage on Image {\n    id\n    title\n    href\n    alt_text\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(\n      width: 315\n      height: 315\n      quality: 85\n      fallback_format: PNG\n    )\n    src_2x: resized_image_url(width: 630, height: 630, fallback_format: PNG)\n    src_3x: resized_image_url(width: 500, height: 500, fallback_format: PNG)\n    original_dimensions {\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableChannel on Channel {\n    id\n    truncatedTitle: title(truncate: 80)\n    visibility\n    updated_at(relative: true)\n    counts {\n      __typename\n      contents\n    }\n    owner {\n      __typename\n      ... on Group {\n        id\n        name\n        visibility\n        __typename\n      }\n      ... on User {\n        id\n        name\n        __typename\n      }\n    }\n    ...KonnectableChannelOverlay\n    ...LoadingBreadcrumbChannel\n    __typename\n  }\n"): (typeof documents)["\n  fragment KonnectableChannel on Channel {\n    id\n    truncatedTitle: title(truncate: 80)\n    visibility\n    updated_at(relative: true)\n    counts {\n      __typename\n      contents\n    }\n    owner {\n      __typename\n      ... on Group {\n        id\n        name\n        visibility\n        __typename\n      }\n      ... on User {\n        id\n        name\n        __typename\n      }\n    }\n    ...KonnectableChannelOverlay\n    ...LoadingBreadcrumbChannel\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableAttachment on Attachment {\n    id\n    title\n    href\n    file_extension\n    image_url(size: DISPLAY)\n    __typename\n  }\n"): (typeof documents)["\n  fragment KonnectableAttachment on Attachment {\n    id\n    title\n    href\n    file_extension\n    image_url(size: DISPLAY)\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableEmbed on Embed {\n    id\n    title\n    href\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(width: 315, height: 315, quality: 85)\n    src_2x: resized_image_url(width: 630, height: 630)\n    src_3x: resized_image_url(width: 945, height: 945)\n    __typename\n  }\n"): (typeof documents)["\n  fragment KonnectableEmbed on Embed {\n    id\n    title\n    href\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(width: 315, height: 315, quality: 85)\n    src_2x: resized_image_url(width: 630, height: 630)\n    src_3x: resized_image_url(width: 945, height: 945)\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableText on Text {\n    id\n    title\n    href\n    html: content(format: HTML)\n    raw: content(format: MARKDOWN)\n    __typename\n  }\n"): (typeof documents)["\n  fragment KonnectableText on Text {\n    id\n    title\n    href\n    html: content(format: HTML)\n    raw: content(format: MARKDOWN)\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableLink on Link {\n    href\n    title\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(\n      width: 415\n      height: 415\n      quality: 90\n      fallback_format: PNG\n    )\n    src_2x: resized_image_url(width: 630, height: 630, fallback_format: PNG)\n    src_3x: resized_image_url(width: 945, height: 945, fallback_format: PNG)\n    external_url: source_url\n    content(format: HTML)\n    __typename\n  }\n"): (typeof documents)["\n  fragment KonnectableLink on Link {\n    href\n    title\n    src: image_url(size: DISPLAY)\n    src_1x: resized_image_url(\n      width: 415\n      height: 415\n      quality: 90\n      fallback_format: PNG\n    )\n    src_2x: resized_image_url(width: 630, height: 630, fallback_format: PNG)\n    src_3x: resized_image_url(width: 945, height: 945, fallback_format: PNG)\n    external_url: source_url\n    content(format: HTML)\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableCell on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      href\n      __typename\n    }\n    ... on Block {\n      count: counts {\n        comments\n        __typename\n      }\n      __typename\n    }\n    ...KonnectableDisplay\n    ...KonnectableMetadata\n    ...KonnectableBlockOverlay\n    ...LoadingBreadcrumbChannel\n  }\n"): (typeof documents)["\n  fragment KonnectableCell on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ... on ConnectableInterface {\n      href\n      __typename\n    }\n    ... on Block {\n      count: counts {\n        comments\n        __typename\n      }\n      __typename\n    }\n    ...KonnectableDisplay\n    ...KonnectableMetadata\n    ...KonnectableBlockOverlay\n    ...LoadingBreadcrumbChannel\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableDisplay on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ...KonnectableChannel\n    ...KonnectableText\n    ...KonnectableImage\n    ...KonnectableLink\n    ...KonnectableEmbed\n    ...KonnectableAttachment\n    ...KonnectableMetadata\n  }\n"): (typeof documents)["\n  fragment KonnectableDisplay on Konnectable {\n    __typename\n    ... on Model {\n      id\n      __typename\n    }\n    ...KonnectableChannel\n    ...KonnectableText\n    ...KonnectableImage\n    ...KonnectableLink\n    ...KonnectableEmbed\n    ...KonnectableAttachment\n    ...KonnectableMetadata\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment KonnectableMetadata on Konnectable {\n    ... on Model {\n      updated_at(relative: true)\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      user {\n        id\n        name\n        __typename\n      }\n      connection {\n        created_at(relative: true)\n        user {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      ... on Attachment {\n        file_extension\n        __typename\n      }\n\n      ... on Link {\n        source_url\n\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n"): (typeof documents)["\n  fragment KonnectableMetadata on Konnectable {\n    ... on Model {\n      updated_at(relative: true)\n      __typename\n    }\n    ... on ConnectableInterface {\n      title\n      user {\n        id\n        name\n        __typename\n      }\n      connection {\n        created_at(relative: true)\n        user {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      ... on Attachment {\n        file_extension\n        __typename\n      }\n\n      ... on Link {\n        source_url\n\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CompactChannel on Channel {\n    __typename\n    id\n    href\n    visibility\n    title\n    owner {\n      ... on Group {\n        __typename\n        id\n        name\n        visibility\n      }\n      ... on User {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n    counts {\n      contents\n      __typename\n    }\n    ...LoadingBreadcrumbChannel\n  }\n"): (typeof documents)["\n  fragment CompactChannel on Channel {\n    __typename\n    id\n    href\n    visibility\n    title\n    owner {\n      ... on Group {\n        __typename\n        id\n        name\n        visibility\n      }\n      ... on User {\n        __typename\n        id\n        name\n      }\n      __typename\n    }\n    counts {\n      contents\n      __typename\n    }\n    ...LoadingBreadcrumbChannel\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;